{
  "name": "node-wit",
  "version": "1.0.0",
  "private": false,
  "homepage": "https://github.com/wit-ai/node-wit",
  "description": "Node module to request Wit.AI",
  "repository": {
    "type": "git",
    "url": "https://github.com/wit-ai/node-wit"
  },
  "bugs": {
    "url": "https://github.com/wit-ai/node-wit/issues"
  },
  "keywords": [
    "wit",
    "automation",
    "home",
    "siri",
    "wit.ai",
    "nlp",
    "speech",
    "intent",
    "jarvis"
  ],
  "author": {
    "name": "Olivier Vaussy",
    "email": "oliv@wit.ai"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/_mocha test/*_test.js --ignore-leaks -t 20000 --reporter spec"
  },
  "dependencies": {
    "request": "2.42.0",
    "underscore": "1.7.0"
  },
  "devDependencies": {
    "mocha": "1.21.4",
    "nock": "0.47.0",
    "chai": "1.9.1"
  },
  "main": "./index.js",
  "readme": "# Wit.AI wrapper for Node.JS\n\n## Quick start\n\n1. You need to create an instance\n\n2. Install [Node.JS](http://nodejs.org/) on your computer\n\n3. Setup your project \n\nCreate a new Node.JS app :\n\n```bash\n$ mkdir myapp\n$ cd myapp\n$ npm init\n...\n```\n\nAdd node-wit as a dependencies in your package.json\n\n```json\n  \"dependencies\": {\n    \"node-wit\": \"1.0.0\"\t\n  },\t\n```\n\nWe will send some audio file to Wit.AI\n\nYou can use [SoX](http://sox.sourceforge.net) to record WAV files from the command line. \nThe following options will create a Wit-ready WAV file (press Ctrl+C to stop recording):\n\n```bash\nsox -d -b 16 -c 1 -r 16k sample.wav\n```\n\nCreate a `index.js` file in myapp directory containing:\n\n```javascript\nvar wit = require('node-wit');\nvar fs = require('fs');\nvar ACCESS_TOKEN = \"YOUR TOKEN HERE\";\n\nconsole.log(\"Sending text & audio to Wit.AI\");\n\nwit.captureTextIntent(ACCESS_TOKEN, \"Hello world\", function (err, res) {\n    console.log(\"Error: \", err);\n    console.log(\"Response from Wit\", JSON.stringify(res, null, \" \"));\n});\n\nvar stream = fs.createReadStream('sample.wav');\nwit.captureSpeechIntent(ACCESS_TOKEN, stream, \"audio/wav\", function (err, res) {\n    console.log(\"Error: \", err);\n    console.log(\"Response from Wit\", JSON.stringify(res, null, \" \"));\n});\n```\n\n4. Start your app\n\n```bash\n$ node index.js\nSending text & audio to Wit.AI\nError:  null\nResponse from Wit {\n \"msg_id\": \"2a029fb0-a962-42f1-b914-6f70a0a055be\",\n \"_text\": \"Hello world\",\n \"outcomes\": [\n  {\n   \"_text\": \"Hello world\",\n   \"intent\": \"greetings_hi\",\n   \"entities\": {},\n   \"confidence\": 0.929\n  }\n ]\n}\nError:  null\nResponse from Wit {\n \"msg_id\": \"a067f9f8-ef7d-4adf-8ffa-4a5080544fdd\",\n \"_text\": \"what's the weather in New York\",\n \"outcomes\": [\n  {\n   \"_text\": \"what's the weather in New York\",\n   \"intent\": \"weather\",\n   \"entities\": {\n    \"location\": [\n     {\n      \"suggested\": true,\n      \"value\": \"New York\"\n     }\n    ]\n   },\n   \"confidence\": 1\n  }\n ]\n}\n```\n\n## Examples\n\n\n## API\n\n### captureTextIntent\n\nThe `captureTextIntent` function returns the meaning extracted from the text\ninput. The function takes 3 parameters:\n- `access_token`: Your access token for your instance\n- `text`: The text input you want to extract the meaning of\n- `callback(error, response)`: A callback function get 3 arguments:\n    1. An `error` when applicable\n    2. A JSON object containing the Wit.AI response\n    \n```javascript\nvar wit = require('node-wit');\nwit.captureTextIntent(ACCESS_TOKEN, \"Hello world\", function (err, res) {\n    console.log(\"Error: \", err);\n    console.log(\"Response from Wit\", JSON.stringify(res, null, \" \"));\n});\n```\n\n### captureSpeechIntent\n\nThe `captureSpeechIntent` function returns the meaning extracted from the audio\ninput. The function takes 4 arguments:\n- `access_token`: Your access token for your instance\n- `stream`: The audio stream you want to extract the meaning of\n- `content-type`: The content-type of your audio stream (`audio/wav`, `audio/mpeg3`, \n`audio/raw;encoding=unsigned-integer;bits=16;rate=8000;endian=big`, ...)\n- `callback(error, response)`: A callback function get 3 arguments:\n    1. An `error` when applicable\n    2. A JSON object containing the Wit.AI response\n    \n```javascript\nvar wit = require('node-wit');\nvar stream = fs.createReadStream('sample.wav');\nwit.captureSpeechIntent(ACCESS_TOKEN, stream, \"audio/wav\", function (err, res) {\n    console.log(\"Error: \", err);\n    console.log(\"Response from Wit\", JSON.stringify(res, null, \" \"));\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "node-wit@1.0.0",
  "_shasum": "5505bc6bf2e836d00c74cb9a0cad9f2ceab14df1",
  "_from": "node-wit@1.0.0",
  "_resolved": "https://registry.npmjs.org/node-wit/-/node-wit-1.0.0.tgz"
}
